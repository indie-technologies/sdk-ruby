module Temporalio
  module Api
    module TaskQueue
      module V1
        # See https://docs.temporal.io/docs/concepts/task-queues/
        #
        class TaskQueue < ::Protobuf::Message
          # Encode the message to a binary string
          #
          def self.encode: (TaskQueue) -> String

          attr_accessor name(): ::String

          def name!: () -> ::String?

          # Default: TASK_QUEUE_KIND_NORMAL.
          #
          attr_accessor kind(): ::Temporalio::Api::Enums::V1::TaskQueueKind

          # Default: TASK_QUEUE_KIND_NORMAL.
          #
          def kind=: (::Temporalio::Api::Enums::V1::TaskQueueKind::values) -> ::Temporalio::Api::Enums::V1::TaskQueueKind::values
                   | ...

          def kind!: () -> ::Temporalio::Api::Enums::V1::TaskQueueKind?

          # Iff kind == TASK_QUEUE_KIND_STICKY, then this field contains the name of
          #  the normal task queue that the sticky worker is running on.
          #
          attr_accessor normal_name(): ::String

          def normal_name!: () -> ::String?

          def initialize: (?name: ::String, ?kind: ::Temporalio::Api::Enums::V1::TaskQueueKind::init, ?normal_name: ::String) -> void

          def []: (:name) -> ::String
                | (:kind) -> ::Temporalio::Api::Enums::V1::TaskQueueKind
                | (:normal_name) -> ::String
                | (::Symbol) -> untyped

          def []=: (:name, ::String) -> ::String
                 | (:kind, ::Temporalio::Api::Enums::V1::TaskQueueKind) -> ::Temporalio::Api::Enums::V1::TaskQueueKind
                 | (:kind, ::Temporalio::Api::Enums::V1::TaskQueueKind::values) -> ::Temporalio::Api::Enums::V1::TaskQueueKind::values
                 | (:normal_name, ::String) -> ::String
                 | (::Symbol, untyped) -> untyped

          interface _ToProto
            def to_proto: () -> TaskQueue
          end

          # The type of `#initialize` parameter.
          type init = TaskQueue | _ToProto

          # The type of `repeated` field.
          type field_array = ::Protobuf::Field::FieldArray[TaskQueue, TaskQueue | _ToProto]

          # The type of `map` field.
          type field_hash[KEY] = ::Protobuf::Field::FieldHash[KEY, TaskQueue, TaskQueue | _ToProto]

          type array = ::Array[TaskQueue | _ToProto]

          type hash[KEY] = ::Hash[KEY, TaskQueue | _ToProto]
        end

        # Only applies to activity task queues
        #
        class TaskQueueMetadata < ::Protobuf::Message
          # Encode the message to a binary string
          #
          def self.encode: (TaskQueueMetadata) -> String

          # Allows throttling dispatch of tasks from this queue
          #
          attr_accessor max_tasks_per_second(): ::Google::Protobuf::DoubleValue?

          # Allows throttling dispatch of tasks from this queue
          #
          def max_tasks_per_second=: [M < ::Google::Protobuf::DoubleValue::_ToProto] (M?) -> M?
                                   | ...

          def max_tasks_per_second!: () -> ::Google::Protobuf::DoubleValue?

          def initialize: (?max_tasks_per_second: ::Google::Protobuf::DoubleValue::init?) -> void

          def []: (:max_tasks_per_second) -> ::Google::Protobuf::DoubleValue?
                | (::Symbol) -> untyped

          def []=: (:max_tasks_per_second, ::Google::Protobuf::DoubleValue?) -> ::Google::Protobuf::DoubleValue?
                 | [M < ::Google::Protobuf::DoubleValue::_ToProto] (:max_tasks_per_second, M?) -> M?
                 | (::Symbol, untyped) -> untyped

          interface _ToProto
            def to_proto: () -> TaskQueueMetadata
          end

          # The type of `#initialize` parameter.
          type init = TaskQueueMetadata | _ToProto

          # The type of `repeated` field.
          type field_array = ::Protobuf::Field::FieldArray[TaskQueueMetadata, TaskQueueMetadata | _ToProto]

          # The type of `map` field.
          type field_hash[KEY] = ::Protobuf::Field::FieldHash[KEY, TaskQueueMetadata, TaskQueueMetadata | _ToProto]

          type array = ::Array[TaskQueueMetadata | _ToProto]

          type hash[KEY] = ::Hash[KEY, TaskQueueMetadata | _ToProto]
        end

        class TaskQueueStatus < ::Protobuf::Message
          # Encode the message to a binary string
          #
          def self.encode: (TaskQueueStatus) -> String

          attr_accessor backlog_count_hint(): ::Integer

          def backlog_count_hint!: () -> ::Integer?

          attr_accessor read_level(): ::Integer

          def read_level!: () -> ::Integer?

          attr_accessor ack_level(): ::Integer

          def ack_level!: () -> ::Integer?

          attr_accessor rate_per_second(): ::Float

          def rate_per_second!: () -> ::Float?

          attr_accessor task_id_block(): ::Temporalio::Api::TaskQueue::V1::TaskIdBlock?

          def task_id_block=: [M < ::Temporalio::Api::TaskQueue::V1::TaskIdBlock::_ToProto] (M?) -> M?
                            | ...

          def task_id_block!: () -> ::Temporalio::Api::TaskQueue::V1::TaskIdBlock?

          def initialize: (?backlog_count_hint: ::Integer, ?read_level: ::Integer, ?ack_level: ::Integer, ?rate_per_second: ::Float, ?task_id_block: ::Temporalio::Api::TaskQueue::V1::TaskIdBlock::init?) -> void

          def []: (:backlog_count_hint) -> ::Integer
                | (:read_level) -> ::Integer
                | (:ack_level) -> ::Integer
                | (:rate_per_second) -> ::Float
                | (:task_id_block) -> ::Temporalio::Api::TaskQueue::V1::TaskIdBlock?
                | (::Symbol) -> untyped

          def []=: (:backlog_count_hint, ::Integer) -> ::Integer
                 | (:read_level, ::Integer) -> ::Integer
                 | (:ack_level, ::Integer) -> ::Integer
                 | (:rate_per_second, ::Float) -> ::Float
                 | (:task_id_block, ::Temporalio::Api::TaskQueue::V1::TaskIdBlock?) -> ::Temporalio::Api::TaskQueue::V1::TaskIdBlock?
                 | [M < ::Temporalio::Api::TaskQueue::V1::TaskIdBlock::_ToProto] (:task_id_block, M?) -> M?
                 | (::Symbol, untyped) -> untyped

          interface _ToProto
            def to_proto: () -> TaskQueueStatus
          end

          # The type of `#initialize` parameter.
          type init = TaskQueueStatus | _ToProto

          # The type of `repeated` field.
          type field_array = ::Protobuf::Field::FieldArray[TaskQueueStatus, TaskQueueStatus | _ToProto]

          # The type of `map` field.
          type field_hash[KEY] = ::Protobuf::Field::FieldHash[KEY, TaskQueueStatus, TaskQueueStatus | _ToProto]

          type array = ::Array[TaskQueueStatus | _ToProto]

          type hash[KEY] = ::Hash[KEY, TaskQueueStatus | _ToProto]
        end

        class TaskIdBlock < ::Protobuf::Message
          # Encode the message to a binary string
          #
          def self.encode: (TaskIdBlock) -> String

          attr_accessor start_id(): ::Integer

          def start_id!: () -> ::Integer?

          attr_accessor end_id(): ::Integer

          def end_id!: () -> ::Integer?

          def initialize: (?start_id: ::Integer, ?end_id: ::Integer) -> void

          def []: (:start_id) -> ::Integer
                | (:end_id) -> ::Integer
                | (::Symbol) -> untyped

          def []=: (:start_id, ::Integer) -> ::Integer
                 | (:end_id, ::Integer) -> ::Integer
                 | (::Symbol, untyped) -> untyped

          interface _ToProto
            def to_proto: () -> TaskIdBlock
          end

          # The type of `#initialize` parameter.
          type init = TaskIdBlock | _ToProto

          # The type of `repeated` field.
          type field_array = ::Protobuf::Field::FieldArray[TaskIdBlock, TaskIdBlock | _ToProto]

          # The type of `map` field.
          type field_hash[KEY] = ::Protobuf::Field::FieldHash[KEY, TaskIdBlock, TaskIdBlock | _ToProto]

          type array = ::Array[TaskIdBlock | _ToProto]

          type hash[KEY] = ::Hash[KEY, TaskIdBlock | _ToProto]
        end

        class TaskQueuePartitionMetadata < ::Protobuf::Message
          # Encode the message to a binary string
          #
          def self.encode: (TaskQueuePartitionMetadata) -> String

          attr_accessor key(): ::String

          def key!: () -> ::String?

          attr_accessor owner_host_name(): ::String

          def owner_host_name!: () -> ::String?

          def initialize: (?key: ::String, ?owner_host_name: ::String) -> void

          def []: (:key) -> ::String
                | (:owner_host_name) -> ::String
                | (::Symbol) -> untyped

          def []=: (:key, ::String) -> ::String
                 | (:owner_host_name, ::String) -> ::String
                 | (::Symbol, untyped) -> untyped

          interface _ToProto
            def to_proto: () -> TaskQueuePartitionMetadata
          end

          # The type of `#initialize` parameter.
          type init = TaskQueuePartitionMetadata | _ToProto

          # The type of `repeated` field.
          type field_array = ::Protobuf::Field::FieldArray[TaskQueuePartitionMetadata, TaskQueuePartitionMetadata | _ToProto]

          # The type of `map` field.
          type field_hash[KEY] = ::Protobuf::Field::FieldHash[KEY, TaskQueuePartitionMetadata, TaskQueuePartitionMetadata | _ToProto]

          type array = ::Array[TaskQueuePartitionMetadata | _ToProto]

          type hash[KEY] = ::Hash[KEY, TaskQueuePartitionMetadata | _ToProto]
        end

        class PollerInfo < ::Protobuf::Message
          # Encode the message to a binary string
          #
          def self.encode: (PollerInfo) -> String

          attr_accessor last_access_time(): ::Google::Protobuf::Timestamp?

          def last_access_time=: [M < ::Google::Protobuf::Timestamp::_ToProto] (M?) -> M?
                               | ...

          def last_access_time!: () -> ::Google::Protobuf::Timestamp?

          attr_accessor identity(): ::String

          def identity!: () -> ::String?

          attr_accessor rate_per_second(): ::Float

          def rate_per_second!: () -> ::Float?

          # If a worker has opted into the worker versioning feature while polling, its capabilities will
          #  appear here.
          #
          attr_accessor worker_version_capabilities(): ::Temporalio::Api::Common::V1::WorkerVersionCapabilities?

          # If a worker has opted into the worker versioning feature while polling, its capabilities will
          #  appear here.
          #
          def worker_version_capabilities=: [M < ::Temporalio::Api::Common::V1::WorkerVersionCapabilities::_ToProto] (M?) -> M?
                                          | ...

          def worker_version_capabilities!: () -> ::Temporalio::Api::Common::V1::WorkerVersionCapabilities?

          def initialize: (?last_access_time: ::Google::Protobuf::Timestamp::init?, ?identity: ::String, ?rate_per_second: ::Float, ?worker_version_capabilities: ::Temporalio::Api::Common::V1::WorkerVersionCapabilities::init?) -> void

          def []: (:last_access_time) -> ::Google::Protobuf::Timestamp?
                | (:identity) -> ::String
                | (:rate_per_second) -> ::Float
                | (:worker_version_capabilities) -> ::Temporalio::Api::Common::V1::WorkerVersionCapabilities?
                | (::Symbol) -> untyped

          def []=: (:last_access_time, ::Google::Protobuf::Timestamp?) -> ::Google::Protobuf::Timestamp?
                 | [M < ::Google::Protobuf::Timestamp::_ToProto] (:last_access_time, M?) -> M?
                 | (:identity, ::String) -> ::String
                 | (:rate_per_second, ::Float) -> ::Float
                 | (:worker_version_capabilities, ::Temporalio::Api::Common::V1::WorkerVersionCapabilities?) -> ::Temporalio::Api::Common::V1::WorkerVersionCapabilities?
                 | [M < ::Temporalio::Api::Common::V1::WorkerVersionCapabilities::_ToProto] (:worker_version_capabilities, M?) -> M?
                 | (::Symbol, untyped) -> untyped

          interface _ToProto
            def to_proto: () -> PollerInfo
          end

          # The type of `#initialize` parameter.
          type init = PollerInfo | _ToProto

          # The type of `repeated` field.
          type field_array = ::Protobuf::Field::FieldArray[PollerInfo, PollerInfo | _ToProto]

          # The type of `map` field.
          type field_hash[KEY] = ::Protobuf::Field::FieldHash[KEY, PollerInfo, PollerInfo | _ToProto]

          type array = ::Array[PollerInfo | _ToProto]

          type hash[KEY] = ::Hash[KEY, PollerInfo | _ToProto]
        end

        class StickyExecutionAttributes < ::Protobuf::Message
          # Encode the message to a binary string
          #
          def self.encode: (StickyExecutionAttributes) -> String

          attr_accessor worker_task_queue(): ::Temporalio::Api::TaskQueue::V1::TaskQueue?

          def worker_task_queue=: [M < ::Temporalio::Api::TaskQueue::V1::TaskQueue::_ToProto] (M?) -> M?
                                | ...

          def worker_task_queue!: () -> ::Temporalio::Api::TaskQueue::V1::TaskQueue?

          # (-- api-linter: core::0140::prepositions=disabled
          #      aip.dev/not-precedent: "to" is used to indicate interval. --)
          #
          attr_accessor schedule_to_start_timeout(): ::Google::Protobuf::Duration?

          # (-- api-linter: core::0140::prepositions=disabled
          #      aip.dev/not-precedent: "to" is used to indicate interval. --)
          #
          def schedule_to_start_timeout=: [M < ::Google::Protobuf::Duration::_ToProto] (M?) -> M?
                                        | ...

          def schedule_to_start_timeout!: () -> ::Google::Protobuf::Duration?

          def initialize: (?worker_task_queue: ::Temporalio::Api::TaskQueue::V1::TaskQueue::init?, ?schedule_to_start_timeout: ::Google::Protobuf::Duration::init?) -> void

          def []: (:worker_task_queue) -> ::Temporalio::Api::TaskQueue::V1::TaskQueue?
                | (:schedule_to_start_timeout) -> ::Google::Protobuf::Duration?
                | (::Symbol) -> untyped

          def []=: (:worker_task_queue, ::Temporalio::Api::TaskQueue::V1::TaskQueue?) -> ::Temporalio::Api::TaskQueue::V1::TaskQueue?
                 | [M < ::Temporalio::Api::TaskQueue::V1::TaskQueue::_ToProto] (:worker_task_queue, M?) -> M?
                 | (:schedule_to_start_timeout, ::Google::Protobuf::Duration?) -> ::Google::Protobuf::Duration?
                 | [M < ::Google::Protobuf::Duration::_ToProto] (:schedule_to_start_timeout, M?) -> M?
                 | (::Symbol, untyped) -> untyped

          interface _ToProto
            def to_proto: () -> StickyExecutionAttributes
          end

          # The type of `#initialize` parameter.
          type init = StickyExecutionAttributes | _ToProto

          # The type of `repeated` field.
          type field_array = ::Protobuf::Field::FieldArray[StickyExecutionAttributes, StickyExecutionAttributes | _ToProto]

          # The type of `map` field.
          type field_hash[KEY] = ::Protobuf::Field::FieldHash[KEY, StickyExecutionAttributes, StickyExecutionAttributes | _ToProto]

          type array = ::Array[StickyExecutionAttributes | _ToProto]

          type hash[KEY] = ::Hash[KEY, StickyExecutionAttributes | _ToProto]
        end

        # Used by the worker versioning APIs, represents an unordered set of one or more versions which are
        #  considered to be compatible with each other. Currently the versions are always worker build IDs.
        #
        class CompatibleVersionSet < ::Protobuf::Message
          # Encode the message to a binary string
          #
          def self.encode: (CompatibleVersionSet) -> String

          # All the compatible versions, unordered, except for the last element, which is considered the set "default".
          #
          attr_accessor build_ids(): ::Protobuf::field_array[::String]

          # All the compatible versions, unordered, except for the last element, which is considered the set "default".
          #
          def build_ids=: (::Array[::String]) -> ::Array[::String]
                        | ...

          def build_ids!: () -> ::Protobuf::field_array[::String]?

          def initialize: (?build_ids: ::Array[::String]) -> void

          def []: (:build_ids) -> ::Protobuf::field_array[::String]
                | (::Symbol) -> untyped

          def []=: (:build_ids, ::Protobuf::field_array[::String]) -> ::Protobuf::field_array[::String]
                 | (:build_ids, ::Array[::String]) -> ::Array[::String]
                 | (::Symbol, untyped) -> untyped

          interface _ToProto
            def to_proto: () -> CompatibleVersionSet
          end

          # The type of `#initialize` parameter.
          type init = CompatibleVersionSet | _ToProto

          # The type of `repeated` field.
          type field_array = ::Protobuf::Field::FieldArray[CompatibleVersionSet, CompatibleVersionSet | _ToProto]

          # The type of `map` field.
          type field_hash[KEY] = ::Protobuf::Field::FieldHash[KEY, CompatibleVersionSet, CompatibleVersionSet | _ToProto]

          type array = ::Array[CompatibleVersionSet | _ToProto]

          type hash[KEY] = ::Hash[KEY, CompatibleVersionSet | _ToProto]
        end

        # Reachability of tasks for a worker on a single task queue.
        #
        class TaskQueueReachability < ::Protobuf::Message
          # Encode the message to a binary string
          #
          def self.encode: (TaskQueueReachability) -> String

          attr_accessor task_queue(): ::String

          def task_queue!: () -> ::String?

          # Task reachability for a worker in a single task queue.
          #  See the TaskReachability docstring for information about each enum variant.
          #  If reachability is empty, this worker is considered unreachable in this task queue.
          #
          attr_accessor reachability(): ::Temporalio::Api::Enums::V1::TaskReachability::field_array

          # Task reachability for a worker in a single task queue.
          #  See the TaskReachability docstring for information about each enum variant.
          #  If reachability is empty, this worker is considered unreachable in this task queue.
          #
          def reachability=: (::Temporalio::Api::Enums::V1::TaskReachability::array) -> ::Temporalio::Api::Enums::V1::TaskReachability::array
                           | ...

          def reachability!: () -> ::Temporalio::Api::Enums::V1::TaskReachability::field_array?

          def initialize: (?task_queue: ::String, ?reachability: ::Temporalio::Api::Enums::V1::TaskReachability::array) -> void

          def []: (:task_queue) -> ::String
                | (:reachability) -> ::Temporalio::Api::Enums::V1::TaskReachability::field_array
                | (::Symbol) -> untyped

          def []=: (:task_queue, ::String) -> ::String
                 | (:reachability, ::Temporalio::Api::Enums::V1::TaskReachability::field_array) -> ::Temporalio::Api::Enums::V1::TaskReachability::field_array
                 | (:reachability, ::Temporalio::Api::Enums::V1::TaskReachability::array) -> ::Temporalio::Api::Enums::V1::TaskReachability::array
                 | (::Symbol, untyped) -> untyped

          interface _ToProto
            def to_proto: () -> TaskQueueReachability
          end

          # The type of `#initialize` parameter.
          type init = TaskQueueReachability | _ToProto

          # The type of `repeated` field.
          type field_array = ::Protobuf::Field::FieldArray[TaskQueueReachability, TaskQueueReachability | _ToProto]

          # The type of `map` field.
          type field_hash[KEY] = ::Protobuf::Field::FieldHash[KEY, TaskQueueReachability, TaskQueueReachability | _ToProto]

          type array = ::Array[TaskQueueReachability | _ToProto]

          type hash[KEY] = ::Hash[KEY, TaskQueueReachability | _ToProto]
        end

        # Reachability of tasks for a worker by build id, in one or more task queues.
        #
        class BuildIdReachability < ::Protobuf::Message
          # Encode the message to a binary string
          #
          def self.encode: (BuildIdReachability) -> String

          # A build id or empty if unversioned.
          #
          attr_accessor build_id(): ::String

          def build_id!: () -> ::String?

          # Reachability per task queue.
          #
          attr_accessor task_queue_reachability(): ::Temporalio::Api::TaskQueue::V1::TaskQueueReachability::field_array

          # Reachability per task queue.
          #
          def task_queue_reachability=: (::Temporalio::Api::TaskQueue::V1::TaskQueueReachability::array) -> ::Temporalio::Api::TaskQueue::V1::TaskQueueReachability::array
                                      | ...

          def task_queue_reachability!: () -> ::Temporalio::Api::TaskQueue::V1::TaskQueueReachability::field_array?

          def initialize: (?build_id: ::String, ?task_queue_reachability: ::Temporalio::Api::TaskQueue::V1::TaskQueueReachability::array) -> void

          def []: (:build_id) -> ::String
                | (:task_queue_reachability) -> ::Temporalio::Api::TaskQueue::V1::TaskQueueReachability::field_array
                | (::Symbol) -> untyped

          def []=: (:build_id, ::String) -> ::String
                 | (:task_queue_reachability, ::Temporalio::Api::TaskQueue::V1::TaskQueueReachability::field_array) -> ::Temporalio::Api::TaskQueue::V1::TaskQueueReachability::field_array
                 | (:task_queue_reachability, ::Temporalio::Api::TaskQueue::V1::TaskQueueReachability::array) -> ::Temporalio::Api::TaskQueue::V1::TaskQueueReachability::array
                 | (::Symbol, untyped) -> untyped

          interface _ToProto
            def to_proto: () -> BuildIdReachability
          end

          # The type of `#initialize` parameter.
          type init = BuildIdReachability | _ToProto

          # The type of `repeated` field.
          type field_array = ::Protobuf::Field::FieldArray[BuildIdReachability, BuildIdReachability | _ToProto]

          # The type of `map` field.
          type field_hash[KEY] = ::Protobuf::Field::FieldHash[KEY, BuildIdReachability, BuildIdReachability | _ToProto]

          type array = ::Array[BuildIdReachability | _ToProto]

          type hash[KEY] = ::Hash[KEY, BuildIdReachability | _ToProto]
        end
      end
    end
  end
end
